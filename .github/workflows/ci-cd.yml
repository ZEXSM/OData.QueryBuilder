name: OData.QueryBuilder
on: [push]

env:
  DOTNET_VERSION: '3.1.x'
jobs:
  ci-cd:
    name: build-and-test-${{matrix.os}}
    runs-on: ${{ matrix.os }}
    environment: ci-cd
    strategy:
      matrix:
        # os: [ubuntu-latest, windows-latest, macOS-latest]
        os: [ubuntu-latest]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      #- name: Setup .NET SDK ${{ matrix.dotnet-version }}
      #  uses: actions/setup-dotnet@v3
      #  with:
      #    dotnet-version: ${{ env.DOTNET_VERSION }}
      #- name: Restore
      #  run: dotnet restore
      #- name: Build
      #  run: dotnet build -c ${{ vars.CONFIGURATION }} --no-restore
      #- name: Test
      #  run: dotnet test -c ${{ vars.CONFIGURATION }} --no-build
      #- name: Coveralls
      #  run: |
      #      dotnet minicover instrument
      #      dotnet minicover reset
      #      dotnet test -c ${{ vars.CONFIGURATION }} --no-build
      #      dotnet minicover uninstrument
      #      dotnet minicover report
            # dotnet minicover coverallsreport --service-name "github-actions" --service-job-id ${{ vars.GITHUB_ACTION }}
      - name: Refresh tags
        id: tag
        run: git fetch --tags --force
      - name: Pack
        run: |
            PR_TITLE=$(git log -1 --pretty='%f')
            LAST_TAG=$(echo $(git describe --tags $(git rev-list --tags --max-count=1)) | cut -d'v' -f 2)
            CURRENT_MAJOR=$(echo $LAST_TAG | cut -d. -f 1)
            CURRENT_MINOR=$(echo $LAST_TAG | cut -d. -f 2)
            CURRENT_PATCH=$(echo $(echo $LAST_TAG | cut -d. -f 3) | cut -d- -f 1)
            RC=$(echo $(echo $LAST_TAG | cut -d. -f 3) | cut -d- -f 2)
            MAJOR=$(([ "$RC" == "rc" ] && echo $CURRENT_MAJOR) || ([ "$(echo $PR_TITLE | grep -oP 'release')" == "release" ] && echo $(($CURRENT_MAJOR+1))) || echo $CURRENT_MAJOR)
            MINOR=$(([ "$RC" == "rc" ] && echo $CURRENT_MINOR) || ([ "$(echo $PR_TITLE | grep -oP 'release')" == "release" ] && echo 0) || ([ "$(echo $PR_TITLE | grep -oP 'feature')" == "feature" ] && echo $(($CURRENT_MINOR+1))) || echo $CURRENT_MINOR)
            PATCH=$(([ "$RC" == "rc" ] && echo $CURRENT_PATCH) || ([ "$(echo $PR_TITLE | grep -oP 'release')" == "release" ] && echo 0) || ([ "$(echo $PR_TITLE | grep -oP 'feature')" == "feature" ] && echo 0) || echo $(($CURRENT_PATCH+1)))
            NEW_TAG=$(echo $MAJOR.$MINOR.$PATCH)
            PACKAGE_VERSION=${NEW_TAG:-${{ vars.DEFAULT_PACKAGE_VERSION }}}
            echo $PR_TITLE
            echo $LAST_TAG
            echo $CURRENT_MAJOR
            echo $CURRENT_MINOR
            echo $CURRENT_PATCH
            echo $RC
            echo $MAJOR
            echo $MINOR
            echo $PATCH
            echo $NEW_TAG
            echo $PACKAGE_VERSION
            #git tag v$PACKAGE_VERSION && git push origin v$PACKAGE_VERSION
            #dotnet pack -c ${{ vars.CONFIGURATION }} -p:PackageVersion=$PACKAGE_VERSION